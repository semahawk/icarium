// a comment
.define ROM_BASE_ADDR 0x800000000000
.define HERE #pc
.base #ROM_BASE_ADDR
.define THERE #pc

.include uart

.alias uart_base r1
.alias byte_to_send r2
.alias uart_stat r3
.alias count r4
.alias babe r6
.alias add_test r7

start:
    set uart_base, 0x80100000 shl 16
    set byte_to_send, 0x73
    // we'll send only this many characters
    set count, 3
    set r5, 1
    set babe, 0xbabe0000

check_if_ready_to_send:
    load uart_stat, uart_base off #UART_STAT
    testbit uart_stat, #UART_STAT_TXD_BUSY
    jump.nz #check_if_ready_to_send
send_char:
    store byte_to_send, uart_base off #UART_DATA

    // just for fun
    shiftl r5, 1
    or babe, r5
    and babe, babe
    add add_test, 1

    // decrease the counter and exit if already at zero
    sub count, 1
    jump.z #exit

    // if not at zero - continue
    jump #check_if_ready_to_send

real_exit:
    halt

exit:
    // jump to #real_exit via a register
    // pc points to the next instruction to execute
    // so there's no need to offset by 8 here
    load r10, pc
    .emit #real_exit
    jump r10
