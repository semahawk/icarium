start: instr*
instr: /nop/         ["." cond] -> nop
     | /jump/        ["." cond] expr -> jump_expr
     | /jump/        ["." cond] reg ["off" expr] -> jump_rro
     | /call/        ["." cond] expr -> call_expr
     | /call/        ["." cond] reg ["off" expr] -> call_rro
     | /return/      ["." cond] -> return_
     | /set/         ["." cond] reg "," expr ["shl" expr] -> set_ris
     | /set/         ["." cond] reg "," reg -> set_rro
     | /load/        ["." cond] reg "," reg ["off" expr] -> load
     | /store/       ["." cond] reg "," reg ["off" expr] -> store
     | /testbit/     ["." cond] reg "," expr -> testbit
     | /sub/         ["." cond] reg "," expr -> sub
     | /add/         ["." cond] reg "," expr -> add
     | /shiftl/      ["." cond] reg "," expr -> shiftl
     | /shiftr/      ["." cond] reg "," expr -> shiftr
     | /or/          ["." cond] reg "," reg -> or_
     | /and/         ["." cond] reg "," reg -> and_
     | /xor/         ["." cond] reg "," reg -> xor
     | /halt/        ["." cond] -> halt
     | /\.base/ expr -> base
     | /\.define/ NAME expr -> define
     | /\.include/ NAME -> include
     | /\.alias/ NAME reg -> alias
     | /\.emit/ expr -> emit
     | /([a-zA-Z_][a-zA-Z0-9_]+):/ -> label

!cond: /(z|nz)/ -> cond

!reg: /r[0-9]+/ -> reg
    | NAME -> reg
    | "pc" -> reg

!sep: /[\\n;]/

?expr: sum

?sum: product
    | sum "+" product -> expr_add
    | sum "-" product -> expr_sub

?product: imm
        | product "*" imm -> expr_mul
        | product "/" imm -> expr_div

!imm: /0b[0-1]+/ -> imm
    | /0c[0-7]+/ -> imm
    | /(0d)?[0-9]+/ -> imm
    | /0x[0-9a-fA-F]+/ -> imm
    | /#([a-zA-Z_][a-zA-Z0-9_]+)/ -> special_imm

NAME: /[a-zA-Z_][a-zA-Z0-9_]*/

COMMENT: "//" /[^\n]/*

%import common.WS -> WS
%ignore COMMENT
%ignore WS
